{"version":3,"file":"index.js","sources":["../../../utility/dist/es/errors/FireError.js","../../../abstracted-database/dist/es/AbstractedDatabase.js","../../src/FirestoreDb.ts","../../src/firestore-types.ts","../../src/FirestoreDbError.ts"],"sourcesContent":["export class FireError extends Error {\n    constructor(message, \n    /**\n     * a type/subtype of the error or you can just state the \"subtype\"\n     * and it will\n     */\n    classification = 'UniversalFire/error', statusCode = 400) {\n        super(message);\n        this.universalFire = true;\n        this.kind = 'FireError';\n        const parts = classification.split('/');\n        const klass = this.constructor.name;\n        this.name = parts.length === 2 ? classification : `${klass}/${parts[0]}`;\n        this.code = parts.length === 2 ? parts[1] : parts[0];\n        this.kind = parts[0];\n        this.statusCode = statusCode;\n    }\n}\n//# sourceMappingURL=FireError.js.map","import { FireError } from '@forest-fire/utility';\nexport class AbstractedDatabase {\n    constructor() {\n        /**\n         * Indicates if the database is using the admin SDK.\n         */\n        this._isAdminApi = false;\n        /**\n         * Indicates if the database is connected.\n         */\n        this._isConnected = false;\n    }\n    /**\n     * Returns key characteristics about the Firebase app being managed.\n     */\n    get app() {\n        if (this.config.mocking) {\n            throw new FireError(`The \"app\" object is provided as direct access to the Firebase API when using a real database but not when using a Mock DB!`, 'not-allowed');\n        }\n        if (this._app) {\n            return {\n                name: this._app.name,\n                databaseURL: this._app.options.databaseURL\n                    ? this._app.options.databaseURL\n                    : '',\n                projectId: this._app.options.projectId\n                    ? this._app.options.projectId\n                    : '',\n                storageBucket: this._app.options.storageBucket\n                    ? this._app.options.storageBucket\n                    : '',\n            };\n        }\n        throw new FireError('Attempt to access Firebase App without having instantiated it');\n    }\n    /**\n     * Provides a set of API's that are exposed by the various \"providers\". Examples\n     * include \"emailPassword\", \"github\", etc.\n     *\n     * > **Note:** this is only really available on the Client SDK's\n     */\n    get authProviders() {\n        throw new FireError(`Only the client SDK's have a authProviders property`);\n    }\n    /**\n     * Indicates if the database is using the admin SDK.\n     */\n    get isAdminApi() {\n        return this._isAdminApi;\n    }\n    /**\n     * Indicates if the database is a mock database or not\n     */\n    get isMockDb() {\n        return this._config.mocking;\n    }\n    /**\n     * The configuration used to setup/configure the database.\n     */\n    get config() {\n        return this._config;\n    }\n    /**\n     * Returns the mock API provided by **firemock**\n     * which in turn gives access to the actual database _state_ off of the\n     * `db` property.\n     *\n     * This is only available if the database has been configured as a mocking database; if it is _not_\n     * a mocked database a `AbstractedDatabase/not-allowed` error will be thrown.\n     */\n    get mock() {\n        if (!this.isMockDb) {\n            throw new FireError(`Attempt to access the \"mock\" property on an abstracted is not allowed unless the database is configured as a Mock database!`, 'AbstractedDatabase/not-allowed');\n        }\n        if (!this._mock) {\n            throw new FireError(`Attempt to access the \"mock\" property on a configuration which IS a mock database but the Mock API has not been initialized yet!`);\n        }\n        return this._mock;\n    }\n    /**\n     * Returns true if the database is connected, false otherwis.\n     */\n    get isConnected() {\n        return this._isConnected;\n    }\n}\n//# sourceMappingURL=AbstractedDatabase.js.map","import { AbstractedDatabase } from '@forest-fire/abstracted-database';\nimport type {\n  IAdminApp,\n  IClientApp,\n  IFirestoreDatabase,\n  IAbstractedDatabase,\n  ISerializedQuery,\n  IAbstractedEvent,\n} from '@forest-fire/types';\nimport { FireError } from '@forest-fire/utility';\nimport { IFirestoreDb } from './firestore-types';\nimport { isFirestoreEvent, FirestoreDbError, VALID_FIRESTORE_EVENTS } from '.';\nimport type { Mock as IMockApi } from 'firemock';\n\nexport abstract class FirestoreDb extends AbstractedDatabase\n  implements IFirestoreDb, IAbstractedDatabase<IMockApi> {\n  protected _database?: IFirestoreDatabase;\n  protected _app!: IClientApp | IAdminApp;\n\n  protected get database() {\n    if (this._database) {\n      return this._database;\n    }\n    throw new FireError(\n      'Attempt to use Firestore without having instantiated it',\n      'not-ready'\n    );\n  }\n\n  protected set database(value: IFirestoreDatabase) {\n    this._database = value;\n  }\n\n  protected _isCollection(path: string | ISerializedQuery) {\n    path = typeof path !== 'string' ? path.path : path;\n    return path.split('/').length % 2 === 0;\n  }\n\n  protected _isDocument(path: string | ISerializedQuery) {\n    return this._isCollection(path) === false;\n  }\n\n  public get mock(): any {\n    throw new Error('Not implemented');\n  }\n\n  public async getList<T = any>(\n    path: string | ISerializedQuery<T>,\n    idProp: string\n  ): Promise<T[]> {\n    path = typeof path !== 'string' ? path.path : path;\n    const querySnapshot = await this.database.collection(path).get();\n    // @ts-ignore\n    return querySnapshot.docs.map((doc) => {\n      return {\n        [idProp]: doc.id,\n        ...doc.data(),\n      };\n    }) as T[];\n  }\n\n  public async getPushKey(path: string) {\n    return this.database.collection(path).doc().id;\n  }\n\n  public async getRecord<T = any>(path: string, idProp: string = 'idProp') {\n    const documentSnapshot = await this.database.doc(path).get();\n    return {\n      ...documentSnapshot.data(),\n      [idProp]: documentSnapshot.id,\n    } as T;\n  }\n\n  public async getValue<T = any>(path: string) {\n    throw new Error('Not implemented');\n  }\n\n  public async update<T = any>(path: string, value: Partial<T>) {\n    await this.database.doc(path).update(value);\n  }\n\n  public async set<T = any>(path: string, value: T) {\n    await this.database.doc(path).set({ ...value });\n  }\n\n  public async remove(path: string) {\n    const pathIsCollection = this._isCollection(path);\n    if (pathIsCollection) {\n      this._removeCollection(path);\n    } else {\n      this._removeDocument(path);\n    }\n  }\n\n  /**\n   * watch\n   *\n   * Watch for firebase events based on a DB path or `SerializedQuery` (path plus query elements)\n   *\n   * @param target a database path or a SerializedQuery\n   * @param events an event type or an array of event types (e.g., \"value\", \"child_added\")\n   * @param cb the callback function to call when event triggered\n   */\n  public watch(\n    target: string | ISerializedQuery,\n    events: IAbstractedEvent | IAbstractedEvent[],\n    cb: any\n  ): void {\n    if (events && !isFirestoreEvent(events)) {\n      throw new FirestoreDbError(\n        `An attempt to watch an event which is not valid for the Firestore database (but likely is for the Real Time database). Events passed in were: ${JSON.stringify(\n          events\n        )}\\n. In contrast, the valid events in Firestore are: ${VALID_FIRESTORE_EVENTS.join(\n          ', '\n        )}`,\n        'invalid-event'\n      );\n    }\n\n    throw new Error('Not implemented');\n  }\n\n  public unWatch(events?: IAbstractedEvent | IAbstractedEvent[], cb?: any) {\n    if (events && !isFirestoreEvent(events)) {\n      throw new FirestoreDbError(\n        `An attempt was made to unwatch an event type which is not valid for the Firestore database. Events passed in were: ${JSON.stringify(\n          events\n        )}\\nIn contrast, the valid events in Firestore are: ${VALID_FIRESTORE_EVENTS.join(\n          ', '\n        )}`,\n        'invalid-event'\n      );\n    }\n\n    throw new Error('Not implemented');\n  }\n\n  public ref(path = '/') {\n    throw new Error('Not implemented');\n  }\n\n  private async _removeDocument(path: string) {\n    await this.database.doc(path).delete();\n  }\n\n  private async _removeCollection(path: string) {\n    const batch = this.database.batch();\n    // @ts-ignore\n    this.database.collection(path).onSnapshot((snapshot) => {\n      // @ts-ignore\n      snapshot.docs.forEach((doc) => {\n        batch.delete(doc.ref);\n      });\n    });\n    // All or nothing.\n    await batch.commit();\n  }\n}\n","import type { FirestoreDb } from './index';\nimport type { AbstractedDatabase } from '@forest-fire/abstracted-database';\nimport { IFirestoreDbEvent, IAbstractedEvent } from '@forest-fire/types';\n\nexport const VALID_FIRESTORE_EVENTS = ['added', 'removed', 'modified'];\n\n/**\n * Because Typescript can't type a _chain_ of dependencies (aka., A => B => C),\n * we have created this type represents the full typing of `RealTimeDb`\n */\nexport type IFirestoreDb = FirestoreDb & AbstractedDatabase;\n\n/**\n * Validates that all events passed in are valid events for\n * the **Firestore** database.\n *\n * @param events the event or events which are being tested\n */\n\nexport function isFirestoreEvent(\n  events: IAbstractedEvent | IAbstractedEvent[]\n): events is IFirestoreDbEvent | IFirestoreDbEvent[] {\n  const evts = Array.isArray(events) ? events : [events];\n\n  return evts.every((e) => (VALID_FIRESTORE_EVENTS.includes(e) ? true : false));\n}\n","import { FireError } from '@forest-fire/utility';\n\nexport class FirestoreDbError extends FireError {\n  kind: 'firestore-db';\n}\n"],"names":[],"mappings":"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"}