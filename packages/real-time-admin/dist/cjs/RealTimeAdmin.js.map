{"version":3,"file":"RealTimeAdmin.js","sources":["../../src/EventManager.ts","../../src/util.ts","../../src/errors/RealTimeAdminError.ts","../../src/RealTimeAdmin.ts"],"sourcesContent":["import { EventEmitter } from 'events';\nimport type { IEmitter } from '@forest-fire/types';\n\nexport class EventManager extends EventEmitter implements IEmitter {\n  public connection(state: boolean) {\n    this.emit('connection', state);\n  }\n}\n","export function slashNotation(path: string) {\n  return path.replace(/\\./g, \"/\");\n}\n\nexport function debug(msg: string, stack?: any[]) {\n  if (process.env.DEBUG) {\n    console.log(msg);\n    if (stack) {\n      console.log(JSON.stringify(stack));\n    }\n  }\n}\n","import { FireError } from '@forest-fire/utility';\n\nexport class RealTimeAdminError extends FireError {\n  kind = 'RealTimeAdminError';\n  constructor(\n    message: string,\n    classification: string = 'RealTimeAdmin/error',\n    statusCode: number = 400\n  ) {\n    super(message, classification, statusCode);\n  }\n}\n","// TODO: reduce this to just named symbols which we need!\nimport firebase from 'firebase-admin';\nimport { RealTimeDb, IRealTimeDb } from '@forest-fire/real-time-db';\nimport { EventManager } from './EventManager';\nimport { debug } from './util';\nimport {\n  IAdminConfig,\n  IMockConfig,\n  isMockConfig,\n  isAdminConfig,\n  IAdminAuth,\n  IAdminApp,\n  IAdminRtdbDatabase,\n  SDK,\n} from '@forest-fire/types';\nimport {\n  extractServiceAccount,\n  FireError,\n  getRunningApps,\n  extractDataUrl,\n  getRunningFirebaseApp,\n  determineDefaultAppName,\n} from '@forest-fire/utility';\nimport { RealTimeAdminError } from './errors/RealTimeAdminError';\nimport { adminAuthSdk } from 'firemock';\n\nexport class RealTimeAdmin extends RealTimeDb implements IRealTimeDb {\n  sdk = SDK.RealTimeAdmin;\n  /**\n   * Instantiates a DB and then waits for the connection\n   * to finish before resolving the promise.\n   */\n  public static async connect(config?: IAdminConfig | IMockConfig) {\n    const obj = new RealTimeAdmin(config);\n    await obj.connect();\n    return obj;\n  }\n\n  private static _connections: IAdminApp[] = [];\n\n  public static get connections() {\n    return RealTimeAdmin._connections.map((i) => i.name);\n  }\n\n  protected _eventManager: EventManager;\n  protected _clientType = 'admin';\n  protected _isAuthorized: boolean = true;\n  protected _auth?: IAdminAuth;\n  protected _config: IAdminConfig | IMockConfig;\n  protected _app!: IAdminApp;\n  protected _database?: IAdminRtdbDatabase;\n  protected _isAdminApi = true;\n\n  constructor(config?: IAdminConfig | IMockConfig) {\n    super();\n    this._eventManager = new EventManager();\n    this.CONNECTION_TIMEOUT = config ? config.timeout || 5000 : 5000;\n    config = {\n      ...config,\n      serviceAccount: extractServiceAccount(config),\n      databaseURL: extractDataUrl(config),\n      name: determineDefaultAppName(config),\n    } as IAdminConfig | IMockConfig;\n    if (isAdminConfig(config)) {\n      this._config = config\n      const runningApps = getRunningApps(firebase.apps);\n      RealTimeAdmin._connections = firebase.apps;\n      const credential = firebase.credential.cert(config.serviceAccount);\n      this._app = runningApps.includes(this._config.name)\n        ? getRunningFirebaseApp<IAdminApp>(\n          config.name,\n          (firebase.apps as unknown) as IAdminApp[]\n        )\n        : firebase.initializeApp(\n          {\n            credential,\n            databaseURL: config.databaseURL,\n          },\n          config.name\n        );\n    } else if (isMockConfig(config)) {\n      this._config = config\n    } else {\n      throw new FireError(\n        `The configuration sent into an Admin SDK abstraction was invalid and may be a client SDK configuration instead. The configuration was: \\n${JSON.stringify(\n          config,\n          null,\n          2\n        )}`,\n        'invalid-configuration'\n      );\n    }\n  }\n\n  public get database(): IAdminRtdbDatabase {\n    if (this.config.mocking) {\n      throw new RealTimeAdminError(\n        `The \"database\" provides direct access to the Firebase database API when using a real database but not when using a Mock DB!`,\n        'not-allowed'\n      );\n    }\n    if (!this._database) {\n      throw new RealTimeAdminError(\n        `The \"database\" object was accessed before it was established as part of the \"connect()\" process!`,\n        'not-allowed'\n      );\n    }\n    return this._database;\n  }\n\n  /**\n   * Provides access to the Firebase Admin Auth API.\n   *\n   * > If using a _mocked_ database then the Auth API will be redirected to **firemock**\n   * instead of the real Admin SDK for Auth. Be aware that this mocked API may not be fully implemented\n   * but PR's are welcome if the part you need is not yet implemented. If you want to explicitly state\n   * whether to use the _real_ or _mock_ Auth SDK then you can state this by passing in a `auth` parameter\n   * as part of the configuration (using either \"real\" or \"mocked\" as a value)\n   *\n   * References:\n   * - [Introduction](https://firebase.google.com/docs/auth/admin)\n   * - [API](https://firebase.google.com/docs/reference/admin/node/admin.auth.Auth)\n   */\n  public async auth(): Promise<IAdminAuth> {\n    if (this._config.mocking) {\n      return adminAuthSdk;\n    }\n    return firebase.auth(this._app);\n  }\n\n  public goOnline() {\n    if (this._database) {\n      try {\n        this._database.goOnline();\n      } catch (e) {\n        debug('There was an error going online:' + e);\n      }\n    } else {\n      console.warn(\n        'Attempt to use goOnline() prior to having a database connection!'\n      );\n    }\n  }\n\n  public goOffline() {\n    if (this._database) {\n      this._database.goOffline();\n    } else {\n      console.warn(\n        'Attempt to use goOffline() prior to having a database connection!'\n      );\n    }\n  }\n\n  public get isConnected() {\n    if (this.isMockDb) {\n      return this._isConnected;\n    }\n\n    return (\n      this._app &&\n      this.config &&\n      this.config.name &&\n      getRunningApps(firebase.apps).includes(this.config.name)\n    );\n  }\n\n  public async connect(): Promise<RealTimeAdmin> {\n    if (isMockConfig(this._config)) {\n      await this._connectMockDb(this._config);\n    } else if (isAdminConfig(this._config)) {\n      await this._connectRealDb(this._config);\n    } else {\n      throw new RealTimeAdminError(\n        'The configuation passed is not valid for an admin SDK!',\n        'invalid-configuration'\n      );\n    }\n\n    return this;\n  }\n\n  protected async _connectMockDb(config: IMockConfig) {\n    await this.getFireMock({\n      db: config.mockData || {},\n      auth: { providers: [], ...config.mockAuth },\n    });\n    this._isConnected = true;\n    return this;\n  }\n\n  protected async _connectRealDb(config: IAdminConfig) {\n    const found = firebase.apps.find((i) => i.name === this.config.name);\n    this._database = (found &&\n      found.database &&\n      typeof found.database !== 'function'\n      ? found.database\n      : this._app.database()) as IAdminRtdbDatabase;\n    this.enableDatabaseLogging = firebase.database.enableLogging.bind(\n      firebase.database\n    );\n    this.goOnline();\n    this._eventManager.connection(true);\n    await this._listenForConnectionStatus();\n    if (this.isConnected) {\n      console.info(\n        `Database ${this.app.name} was already connected. Reusing connection.`\n      );\n    }\n  }\n\n  /**\n   * listenForConnectionStatus\n   *\n   * in the admin interface we assume that ONCE connected\n   * we remain connected; this is unlike the client API\n   * which provides an endpoint to lookup\n   */\n  protected async _listenForConnectionStatus() {\n    this._setupConnectionListener();\n    this._eventManager.connection(true);\n  }\n}\n"],"names":["EventEmitter","FireError","RealTimeDb","extractServiceAccount","extractDataUrl","determineDefaultAppName","isAdminConfig","getRunningApps","getRunningFirebaseApp","isMockConfig","adminAuthSdk"],"mappings":"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"}