{"version":3,"file":"index.js","sources":["../../../utility/dist/es/errors/FireError.js","../../../types/dist/es/index.js","../../../utility/dist/es/admin-sdk/extractServiceAccount.js","../../../utility/dist/es/admin-sdk/extractDataUrl.js","../../../utility/dist/es/shared/getRunningApps.js","../../../utility/dist/es/shared/getRunningFirebaseApp.js","../../../utility/dist/es/shared/looksLikeJson.js","../../../utility/dist/es/shared/determineDefaultAppName.js","../../../firestore-db/dist/es/index.js","../../src/FirestoreAdmin.ts"],"sourcesContent":["export class FireError extends Error {\n    constructor(message, \n    /**\n     * a type/subtype of the error or you can just state the \"subtype\"\n     * and it will\n     */\n    classification = 'UniversalFire/error', statusCode = 400) {\n        super(message);\n        this.universalFire = true;\n        this.kind = 'FireError';\n        const parts = classification.split('/');\n        const klass = this.constructor.name;\n        this.name = parts.length === 2 ? classification : `${klass}/${parts[0]}`;\n        this.code = parts.length === 2 ? parts[1] : parts[0];\n        this.kind = parts[0];\n        this.statusCode = statusCode;\n    }\n}\n//# sourceMappingURL=FireError.js.map","function isMockConfig(config) {\r\n    return config && config.mocking === true;\r\n}\r\nfunction isRealDbConfig(config) {\r\n    return config && config.mocking !== true;\r\n}\r\n/**\r\n * In a client SDK setting, this checks that the typing is NOT a mock\r\n * typing (and that apiKey and databaseURL are indeed set) and responds\r\n * by letting typescript know that it is a `IClientConfig` configuration.\r\n */\r\nfunction isClientConfig(config) {\r\n    return config &&\r\n        config.mocking !== true &&\r\n        config.apiKey !== undefined &&\r\n        config.databaseURL !== undefined\r\n        ? true\r\n        : false;\r\n}\r\nfunction isAdminConfig(config) {\r\n    return config &&\r\n        config.mocking !== true &&\r\n        config.apiKey === undefined &&\r\n        config.databaseURL !== undefined\r\n        ? true\r\n        : false;\r\n}\n\nvar RealQueryOrderType;\r\n(function (RealQueryOrderType) {\r\n    RealQueryOrderType[\"orderByChild\"] = \"orderByChild\";\r\n    RealQueryOrderType[\"orderByKey\"] = \"orderByKey\";\r\n    RealQueryOrderType[\"orderByValue\"] = \"orderByValue\";\r\n})(RealQueryOrderType || (RealQueryOrderType = {}));\n\nexport { RealQueryOrderType, isAdminConfig, isClientConfig, isMockConfig, isRealDbConfig };\n//# sourceMappingURL=index.js.map\n","import { FireError, looksLikeJson } from '../index';\nimport { isMockConfig, } from '@forest-fire/types';\n/**\n * Takes as input a variety of possible formats and converts it into\n * a Firebase service account (`IServiceAccount`). The input formats\n * which it accepts are:\n *\n * - an `IServiceAccount` object (_in which case nothing to be done_)\n * - a JSON encoded string of the `IServiceAccount` object\n * - a base64 encoded string of a `IServiceAccount` object (_possible but not recommended\n * as an ENV variable may run out of room to encode_)\n * - a base64 encoded GZIP of a `IServiceAccount` object (_this is ideal for ENV vars\n * which have limited length and must be string_)\n */\nexport function extractServiceAccount(config) {\n    if (isMockConfig(config)) {\n        return {};\n    }\n    const serviceAccount = config && config.mocking !== true && config.serviceAccount\n        ? config.serviceAccount\n        : process.env['FIREBASE_SERVICE_ACCOUNT'];\n    if (!serviceAccount) {\n        throw new FireError(`There was no service account defined (either passed in or in the FIREBASE_SERVICE_ACCOUNT ENV variable)!`, 'invalid-configuration');\n    }\n    switch (typeof serviceAccount) {\n        case 'object':\n            if (serviceAccount.privateKey && serviceAccount.projectId) {\n                return serviceAccount;\n            }\n            else {\n                throw new FireError(`An attempt to use the Admin SDK failed because a service account object was passed in but it did NOT have the required properties of \"privateKey\" and \"projectId\".`, 'invalid-configuration');\n            }\n        case 'string':\n            // JSON\n            if (looksLikeJson(serviceAccount)) {\n                try {\n                    const data = JSON.parse(serviceAccount);\n                    if (data.private_key && data.type === 'service_account') {\n                        return data;\n                    }\n                    else {\n                        throw new FireError(`The configuration appeared to contain a JSON encoded representation of the service account but after decoding it the private_key and/or the type property were not correctly set.`, 'invalid-configuration');\n                    }\n                }\n                catch (e) {\n                    throw new FireError(`The configuration appeared to contain a JSOn encoded representation but was unable to be parsed: ${e.message}`, 'invalid-configuration');\n                }\n            }\n            // BASE 64\n            try {\n                const buffer = Buffer.from(serviceAccount, 'base64');\n                return JSON.parse(buffer.toString());\n            }\n            catch (e) {\n                throw new FireError(`Failed to convert a string based service account to IServiceAccount! The error was: ${e.message}`, 'invalid-configuration');\n            }\n        default:\n            throw new FireError(`Couldn't extract the serviceAccount from ENV variables! The configuration was:\\n${(JSON.stringify, null, 2)}`, 'invalid-configuration');\n    }\n}\n//# sourceMappingURL=extractServiceAccount.js.map","import { isMockConfig } from '@forest-fire/types';\nimport { FireError } from '../index';\n/**\n * extracts the Firebase **databaseURL** property either from the passed in\n * configuration or via the FIREBASE_DATABASE_URL environment variable.\n */\nexport function extractDataUrl(config) {\n    if (isMockConfig(config)) {\n        return 'https://mocking.com';\n    }\n    const dataUrl = config && config.databaseURL\n        ? config.databaseURL\n        : process.env['FIREBASE_DATABASE_URL'];\n    if (!dataUrl) {\n        throw new FireError(`There was no DATABASE URL provided! This needs to be passed in as part of the configuration or as the FIREBASE_DATABASE_URL environment variable.`, 'invalid-configuration');\n    }\n    return dataUrl;\n}\n//# sourceMappingURL=extractDataUrl.js.map","/**\n * Returns an array of named apps that are running under\n * Firebase's control (admin API)\n */\nexport function getRunningApps(apps) {\n    return apps.filter((i) => i !== null).map((i) => i.name);\n}\n//# sourceMappingURL=getRunningApps.js.map","import { FireError } from '../index';\n/** Gets the  */\nexport function getRunningFirebaseApp(name, apps) {\n    const result = name\n        ? apps.find((i) => i && i.name === name)\n        : undefined;\n    if (!result) {\n        throw new FireError(`Attempt to get the Firebase app named \"${name}\" failed`, 'invalid-app-name');\n    }\n    return result;\n}\n//# sourceMappingURL=getRunningFirebaseApp.js.map","export function looksLikeJson(data) {\n    return data.trim().slice(0, 1) === '{' && data.trim().slice(-1) === '}'\n        ? true\n        : false;\n}\n//# sourceMappingURL=looksLikeJson.js.map","export function determineDefaultAppName(config) {\n    if (!config) {\n        return '[DEFAULT]';\n    }\n    return config.name\n        ? config.name\n        : config.databaseURL\n            ? config.databaseURL.replace(/.*https:\\W*([\\w-]*)\\.((.|\\n)*)/g, '$1')\n            : '[DEFAULT]';\n}\n//# sourceMappingURL=determineDefaultAppName.js.map","import { FireError } from '@forest-fire/utility';\n\nclass AbstractedDatabase {\n    constructor() {\n        /**\n         * Indicates if the database is using the admin SDK.\n         */\n        this._isAdminApi = false;\n        /**\n         * Indicates if the database is connected.\n         */\n        this._isConnected = false;\n    }\n    /**\n     * Returns key characteristics about the Firebase app being managed.\n     */\n    get app() {\n        if (this.config.mocking) {\n            throw new FireError(`The \"app\" object is provided as direct access to the Firebase API when using a real database but not when using a Mock DB!`, 'not-allowed');\n        }\n        if (this._app) {\n            return {\n                name: this._app.name,\n                databaseURL: this._app.options.databaseURL\n                    ? this._app.options.databaseURL\n                    : '',\n                projectId: this._app.options.projectId\n                    ? this._app.options.projectId\n                    : '',\n                storageBucket: this._app.options.storageBucket\n                    ? this._app.options.storageBucket\n                    : '',\n            };\n        }\n        throw new FireError('Attempt to access Firebase App without having instantiated it');\n    }\n    /**\n     * Provides a set of API's that are exposed by the various \"providers\". Examples\n     * include \"emailPassword\", \"github\", etc.\n     *\n     * > **Note:** this is only really available on the Client SDK's\n     */\n    get authProviders() {\n        throw new FireError(`Only the client SDK's have a authProviders property`);\n    }\n    /**\n     * Indicates if the database is using the admin SDK.\n     */\n    get isAdminApi() {\n        return this._isAdminApi;\n    }\n    /**\n     * Indicates if the database is a mock database or not\n     */\n    get isMockDb() {\n        return this._config.mocking;\n    }\n    /**\n     * The configuration used to setup/configure the database.\n     */\n    get config() {\n        return this._config;\n    }\n    /**\n     * Returns the mock API provided by **firemock**\n     * which in turn gives access to the actual database _state_ off of the\n     * `db` property.\n     *\n     * This is only available if the database has been configured as a mocking database; if it is _not_\n     * a mocked database a `AbstractedDatabase/not-allowed` error will be thrown.\n     */\n    get mock() {\n        if (!this.isMockDb) {\n            throw new FireError(`Attempt to access the \"mock\" property on an abstracted is not allowed unless the database is configured as a Mock database!`, 'AbstractedDatabase/not-allowed');\n        }\n        if (!this._mock) {\n            throw new FireError(`Attempt to access the \"mock\" property on a configuration which IS a mock database but the Mock API has not been initialized yet!`);\n        }\n        return this._mock;\n    }\n    /**\n     * Returns true if the database is connected, false otherwis.\n     */\n    get isConnected() {\n        return this._isConnected;\n    }\n    /**\n     * **getFireMock**\n     *\n     * Asynchronously imports both `FireMock` and the `Faker` libraries\n     * then sets `isConnected` to **true**\n     */\n    async getFireMock(config = {}) {\n        const FireMock = await import(\n        /* webpackChunkName: \"firemock\" */ 'firemock');\n        this._mock = await FireMock.Mock.prepare(config);\n    }\n}\n\nclass FirestoreDb extends AbstractedDatabase {\r\n    get database() {\r\n        if (this._database) {\r\n            return this._database;\r\n        }\r\n        throw new FireError('Attempt to use Firestore without having instantiated it', 'not-ready');\r\n    }\r\n    set database(value) {\r\n        this._database = value;\r\n    }\r\n    _isCollection(path) {\r\n        path = typeof path !== 'string' ? path.path : path;\r\n        return path.split('/').length % 2 === 0;\r\n    }\r\n    _isDocument(path) {\r\n        return this._isCollection(path) === false;\r\n    }\r\n    get mock() {\r\n        throw new Error('Not implemented');\r\n    }\r\n    async getList(path, idProp = 'id') {\r\n        path = typeof path !== 'string' ? path.path : path;\r\n        const querySnapshot = await this.database.collection(path).get();\r\n        // @ts-ignore\r\n        return querySnapshot.docs.map((doc) => {\r\n            return {\r\n                [idProp]: doc.id,\r\n                ...doc.data(),\r\n            };\r\n        });\r\n    }\r\n    async getPushKey(path) {\r\n        return this.database.collection(path).doc().id;\r\n    }\r\n    async getRecord(path, idProp = 'id') {\r\n        const documentSnapshot = await this.database.doc(path).get();\r\n        return {\r\n            ...documentSnapshot.data(),\r\n            [idProp]: documentSnapshot.id,\r\n        };\r\n    }\r\n    async getValue(path) {\r\n        throw new Error('Not implemented');\r\n    }\r\n    async update(path, value) {\r\n        await this.database.doc(path).update(value);\r\n    }\r\n    async set(path, value) {\r\n        await this.database.doc(path).set({ ...value });\r\n    }\r\n    async remove(path) {\r\n        const pathIsCollection = this._isCollection(path);\r\n        if (pathIsCollection) {\r\n            this._removeCollection(path);\r\n        }\r\n        else {\r\n            this._removeDocument(path);\r\n        }\r\n    }\r\n    /**\r\n     * watch\r\n     *\r\n     * Watch for firebase events based on a DB path or `SerializedQuery` (path plus query elements)\r\n     *\r\n     * @param target a database path or a SerializedQuery\r\n     * @param events an event type or an array of event types (e.g., \"value\", \"child_added\")\r\n     * @param cb the callback function to call when event triggered\r\n     */\r\n    watch(target, events, cb) {\r\n        if (events && !isFirestoreEvent(events)) {\r\n            throw new FirestoreDbError(`An attempt to watch an event which is not valid for the Firestore database (but likely is for the Real Time database). Events passed in were: ${JSON.stringify(events)}\\n. In contrast, the valid events in Firestore are: ${VALID_FIRESTORE_EVENTS.join(', ')}`, 'invalid-event');\r\n        }\r\n        throw new Error('Not implemented');\r\n    }\r\n    unWatch(events, cb) {\r\n        if (events && !isFirestoreEvent(events)) {\r\n            throw new FirestoreDbError(`An attempt was made to unwatch an event type which is not valid for the Firestore database. Events passed in were: ${JSON.stringify(events)}\\nIn contrast, the valid events in Firestore are: ${VALID_FIRESTORE_EVENTS.join(', ')}`, 'invalid-event');\r\n        }\r\n        throw new Error('Not implemented');\r\n    }\r\n    ref(path = '/') {\r\n        throw new Error('Not implemented');\r\n    }\r\n    async _removeDocument(path) {\r\n        await this.database.doc(path).delete();\r\n    }\r\n    async _removeCollection(path) {\r\n        const batch = this.database.batch();\r\n        // @ts-ignore\r\n        this.database.collection(path).onSnapshot((snapshot) => {\r\n            // @ts-ignore\r\n            snapshot.docs.forEach((doc) => {\r\n                batch.delete(doc.ref);\r\n            });\r\n        });\r\n        // All or nothing.\r\n        await batch.commit();\r\n    }\r\n}\n\nconst VALID_FIRESTORE_EVENTS = ['added', 'removed', 'modified'];\r\n/**\r\n * Validates that all events passed in are valid events for\r\n * the **Firestore** database.\r\n *\r\n * @param events the event or events which are being tested\r\n */\r\nfunction isFirestoreEvent(events) {\r\n    const evts = Array.isArray(events) ? events : [events];\r\n    return evts.every((e) => (VALID_FIRESTORE_EVENTS.includes(e) ? true : false));\r\n}\n\nclass FirestoreDbError extends FireError {\r\n}\n\nexport { FirestoreDb, FirestoreDbError, VALID_FIRESTORE_EVENTS, isFirestoreEvent };\n//# sourceMappingURL=index.js.map\n","import {\n  app,\n  apps,\n  credential as fbCredential,\n  initializeApp,\n  auth,\n  firestore,\n} from 'firebase-admin';\n\nimport {\n  FireError,\n  determineDefaultAppName,\n  extractDataUrl,\n  extractServiceAccount,\n  getRunningApps,\n  getRunningFirebaseApp,\n} from '@forest-fire/utility';\nimport {\n  IAbstractedDatabase,\n  IAdminApp,\n  IAdminAuth,\n  IAdminConfig,\n  IAdminSdk,\n  IMockConfig,\n  SDK,\n  isAdminConfig,\n  isMockConfig,\n} from '@forest-fire/types';\n\nimport { FirestoreDb } from '@forest-fire/firestore-db';\nimport type { Mock as IMockApi } from 'firemock';\n\nexport class FirestoreAdmin extends FirestoreDb\n  implements IAdminSdk, IAbstractedDatabase<IMockApi> {\n  sdk = SDK.FirestoreAdmin;\n  static async connect(config: IAdminConfig | IMockConfig) {\n    const obj = new FirestoreAdmin(config);\n    await obj.connect();\n    return obj;\n  }\n\n  protected _isAdminApi = true;\n  protected _auth?: IAdminAuth;\n  protected _app!: IAdminApp;\n  protected _config: IAdminConfig | IMockConfig;\n\n  constructor(config?: IAdminConfig | IMockConfig) {\n    super();\n    if (isMockConfig(config)) {\n      throw new FireError(\n        `Mock is not supported by Firestore`,\n        `invalid-configuration`\n      );\n    }\n    if (!config) {\n      config = {\n        serviceAccount: extractServiceAccount(config),\n        databaseURL: extractDataUrl(config),\n      };\n    }\n    if (isAdminConfig(config)) {\n      config.serviceAccount =\n        config.serviceAccount || extractServiceAccount(config);\n      config.databaseURL = config.databaseURL || extractDataUrl(config);\n      config.name = determineDefaultAppName(config);\n      this._config = config;\n    } else {\n      throw new FireError(\n        `The configuration sent into an Admin SDK abstraction was invalid and may be a client SDK configuration instead. The configuration was: \\n${JSON.stringify(\n          config,\n          null,\n          2\n        )}`,\n        'invalid-configuration'\n      );\n    }\n    this._config = config;\n  }\n\n  public async connect(): Promise<FirestoreAdmin> {\n    if (this._isConnected) {\n      console.info(`Firestore ${this.config.name} already connected`);\n      return this;\n    }\n    if (isAdminConfig(this._config)) {\n      await this._connectRealDb(this._config);\n    } else if (isMockConfig(this._config)) {\n      await this._connectMockDb(this._config);\n    }\n  }\n\n  public async auth(): Promise<IAdminAuth> {\n    if (this._config.mocking) {\n      throw new FireError(\n        `The auth API for MOCK databases is not yet implemented for Firestore`\n      );\n    }\n\n    return auth(this._app as app.App);\n  }\n\n  protected async _connectRealDb(config: IAdminConfig) {\n    if (!config?.serviceAccount) {\n      throw new FireError(\n        `There was no service account found in the configuration!`\n      );\n    }\n    const runningApps = getRunningApps(apps);\n    const credential = fbCredential.cert(config.serviceAccount);\n\n    if (!this._isConnected) {\n      this._app = runningApps.includes(config.name)\n        ? getRunningFirebaseApp<IAdminApp>(\n            config.name,\n            (apps as unknown) as IAdminApp[]\n          )\n        : initializeApp(\n            {\n              credential,\n              databaseURL: config.databaseURL,\n            },\n            config.name\n          );\n    }\n  }\n  /**\n   * The steps needed to connect a database to a Firemock\n   * mocked DB.\n   */\n  protected async _connectMockDb(config: IMockConfig) {\n    await this.getFireMock({\n      db: config.mockData || {},\n      auth: { providers: [], ...config.mockAuth },\n    });\n  }\n}\n"],"names":["credential","fbCredential"],"mappings":";;AAAO,MAAM,SAAS,SAAS,KAAK,CAAC;AACrC,IAAI,WAAW,CAAC,OAAO;AACvB;AACA;AACA;AACA;AACA,IAAI,cAAc,GAAG,qBAAqB,EAAE,UAAU,GAAG,GAAG,EAAE;AAC9D,QAAQ,KAAK,CAAC,OAAO,CAAC,CAAC;AACvB,QAAQ,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC;AAClC,QAAQ,IAAI,CAAC,IAAI,GAAG,WAAW,CAAC;AAChC,QAAQ,MAAM,KAAK,GAAG,cAAc,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;AAChD,QAAQ,MAAM,KAAK,GAAG,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC;AAC5C,QAAQ,IAAI,CAAC,IAAI,GAAG,KAAK,CAAC,MAAM,KAAK,CAAC,GAAG,cAAc,GAAG,CAAC,EAAE,KAAK,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACjF,QAAQ,IAAI,CAAC,IAAI,GAAG,KAAK,CAAC,MAAM,KAAK,CAAC,GAAG,KAAK,CAAC,CAAC,CAAC,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;AAC7D,QAAQ,IAAI,CAAC,IAAI,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;AAC7B,QAAQ,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC;AACrC,KAAK;AACL;;ACjBA,SAAS,YAAY,CAAC,MAAM,EAAE;AAC9B,IAAI,OAAO,MAAM,IAAI,MAAM,CAAC,OAAO,KAAK,IAAI,CAAC;AAC7C,CAAC;AAiBD,SAAS,aAAa,CAAC,MAAM,EAAE;AAC/B,IAAI,OAAO,MAAM;AACjB,QAAQ,MAAM,CAAC,OAAO,KAAK,IAAI;AAC/B,QAAQ,MAAM,CAAC,MAAM,KAAK,SAAS;AACnC,QAAQ,MAAM,CAAC,WAAW,KAAK,SAAS;AACxC,UAAU,IAAI;AACd,UAAU,KAAK,CAAC;AAChB,CAAC;AACD;AACA,IAAI,kBAAkB,CAAC;AACvB,CAAC,UAAU,kBAAkB,EAAE;AAC/B,IAAI,kBAAkB,CAAC,cAAc,CAAC,GAAG,cAAc,CAAC;AACxD,IAAI,kBAAkB,CAAC,YAAY,CAAC,GAAG,YAAY,CAAC;AACpD,IAAI,kBAAkB,CAAC,cAAc,CAAC,GAAG,cAAc,CAAC;AACxD,CAAC,EAAE,kBAAkB,KAAK,kBAAkB,GAAG,EAAE,CAAC,CAAC;;AC/BnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,SAAS,qBAAqB,CAAC,MAAM,EAAE;AAC9C,IAAI,IAAI,YAAY,CAAC,MAAM,CAAC,EAAE;AAC9B,QAAQ,OAAO,EAAE,CAAC;AAClB,KAAK;AACL,IAAI,MAAM,cAAc,GAAG,MAAM,IAAI,MAAM,CAAC,OAAO,KAAK,IAAI,IAAI,MAAM,CAAC,cAAc;AACrF,UAAU,MAAM,CAAC,cAAc;AAC/B,UAAU,OAAO,CAAC,GAAG,CAAC,0BAA0B,CAAC,CAAC;AAClD,IAAI,IAAI,CAAC,cAAc,EAAE;AACzB,QAAQ,MAAM,IAAI,SAAS,CAAC,CAAC,wGAAwG,CAAC,EAAE,uBAAuB,CAAC,CAAC;AACjK,KAAK;AACL,IAAI,QAAQ,OAAO,cAAc;AACjC,QAAQ,KAAK,QAAQ;AACrB,YAAY,IAAI,cAAc,CAAC,UAAU,IAAI,cAAc,CAAC,SAAS,EAAE;AACvE,gBAAgB,OAAO,cAAc,CAAC;AACtC,aAAa;AACb,iBAAiB;AACjB,gBAAgB,MAAM,IAAI,SAAS,CAAC,CAAC,kKAAkK,CAAC,EAAE,uBAAuB,CAAC,CAAC;AACnO,aAAa;AACb,QAAQ,KAAK,QAAQ;AACrB;AACA,YAAY,IAAI,aAAa,CAAC,cAAc,CAAC,EAAE;AAC/C,gBAAgB,IAAI;AACpB,oBAAoB,MAAM,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,cAAc,CAAC,CAAC;AAC5D,oBAAoB,IAAI,IAAI,CAAC,WAAW,IAAI,IAAI,CAAC,IAAI,KAAK,iBAAiB,EAAE;AAC7E,wBAAwB,OAAO,IAAI,CAAC;AACpC,qBAAqB;AACrB,yBAAyB;AACzB,wBAAwB,MAAM,IAAI,SAAS,CAAC,CAAC,iLAAiL,CAAC,EAAE,uBAAuB,CAAC,CAAC;AAC1P,qBAAqB;AACrB,iBAAiB;AACjB,gBAAgB,OAAO,CAAC,EAAE;AAC1B,oBAAoB,MAAM,IAAI,SAAS,CAAC,CAAC,iGAAiG,EAAE,CAAC,CAAC,OAAO,CAAC,CAAC,EAAE,uBAAuB,CAAC,CAAC;AAClL,iBAAiB;AACjB,aAAa;AACb;AACA,YAAY,IAAI;AAChB,gBAAgB,MAAM,MAAM,GAAG,MAAM,CAAC,IAAI,CAAC,cAAc,EAAE,QAAQ,CAAC,CAAC;AACrE,gBAAgB,OAAO,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,QAAQ,EAAE,CAAC,CAAC;AACrD,aAAa;AACb,YAAY,OAAO,CAAC,EAAE;AACtB,gBAAgB,MAAM,IAAI,SAAS,CAAC,CAAC,oFAAoF,EAAE,CAAC,CAAC,OAAO,CAAC,CAAC,EAAE,uBAAuB,CAAC,CAAC;AACjK,aAAa;AACb,QAAQ;AACR,YAAY,MAAM,IAAI,SAAS,CAAC,CAAC,gFAAgF,GAAyB,CAAC,EAAE,CAAC,EAAE,uBAAuB,CAAC,CAAC;AACzK,KAAK;AACL;;ACzDA;AACA;AACA;AACA;AACO,SAAS,cAAc,CAAC,MAAM,EAAE;AACvC,IAAI,IAAI,YAAY,CAAC,MAAM,CAAC,EAAE;AAC9B,QAAQ,OAAO,qBAAqB,CAAC;AACrC,KAAK;AACL,IAAI,MAAM,OAAO,GAAG,MAAM,IAAI,MAAM,CAAC,WAAW;AAChD,UAAU,MAAM,CAAC,WAAW;AAC5B,UAAU,OAAO,CAAC,GAAG,CAAC,uBAAuB,CAAC,CAAC;AAC/C,IAAI,IAAI,CAAC,OAAO,EAAE;AAClB,QAAQ,MAAM,IAAI,SAAS,CAAC,CAAC,iJAAiJ,CAAC,EAAE,uBAAuB,CAAC,CAAC;AAC1M,KAAK;AACL,IAAI,OAAO,OAAO,CAAC;AACnB;;ACjBA;AACA;AACA;AACA;AACO,SAAS,cAAc,CAAC,IAAI,EAAE;AACrC,IAAI,OAAO,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,KAAK,CAAC,KAAK,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,CAAC;AAC7D;;ACLA;AACO,SAAS,qBAAqB,CAAC,IAAI,EAAE,IAAI,EAAE;AAClD,IAAI,MAAM,MAAM,GAAG,IAAI;AACvB,UAAU,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,IAAI,KAAK,IAAI,CAAC;AAChD,UAAU,SAAS,CAAC;AACpB,IAAI,IAAI,CAAC,MAAM,EAAE;AACjB,QAAQ,MAAM,IAAI,SAAS,CAAC,CAAC,uCAAuC,EAAE,IAAI,CAAC,QAAQ,CAAC,EAAE,kBAAkB,CAAC,CAAC;AAC1G,KAAK;AACL,IAAI,OAAO,MAAM,CAAC;AAClB;;ACVO,SAAS,aAAa,CAAC,IAAI,EAAE;AACpC,IAAI,OAAO,IAAI,CAAC,IAAI,EAAE,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,KAAK,GAAG,IAAI,IAAI,CAAC,IAAI,EAAE,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,KAAK,GAAG;AAC3E,UAAU,IAAI;AACd,UAAU,KAAK,CAAC;AAChB;;ACJO,SAAS,uBAAuB,CAAC,MAAM,EAAE;AAChD,IAAI,IAAI,CAAC,MAAM,EAAE;AACjB,QAAQ,OAAO,WAAW,CAAC;AAC3B,KAAK;AACL,IAAI,OAAO,MAAM,CAAC,IAAI;AACtB,UAAU,MAAM,CAAC,IAAI;AACrB,UAAU,MAAM,CAAC,WAAW;AAC5B,cAAc,MAAM,CAAC,WAAW,CAAC,OAAO,CAAC,iCAAiC,EAAE,IAAI,CAAC;AACjF,cAAc,WAAW,CAAC;AAC1B;;ACPA,MAAM,kBAAkB,CAAC;AACzB,IAAI,WAAW,GAAG;AAClB;AACA;AACA;AACA,QAAQ,IAAI,CAAC,WAAW,GAAG,KAAK,CAAC;AACjC;AACA;AACA;AACA,QAAQ,IAAI,CAAC,YAAY,GAAG,KAAK,CAAC;AAClC,KAAK;AACL;AACA;AACA;AACA,IAAI,IAAI,GAAG,GAAG;AACd,QAAQ,IAAI,IAAI,CAAC,MAAM,CAAC,OAAO,EAAE;AACjC,YAAY,MAAM,IAAI,SAAS,CAAC,CAAC,0HAA0H,CAAC,EAAE,aAAa,CAAC,CAAC;AAC7K,SAAS;AACT,QAAQ,IAAI,IAAI,CAAC,IAAI,EAAE;AACvB,YAAY,OAAO;AACnB,gBAAgB,IAAI,EAAE,IAAI,CAAC,IAAI,CAAC,IAAI;AACpC,gBAAgB,WAAW,EAAE,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,WAAW;AAC1D,sBAAsB,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,WAAW;AACnD,sBAAsB,EAAE;AACxB,gBAAgB,SAAS,EAAE,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,SAAS;AACtD,sBAAsB,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,SAAS;AACjD,sBAAsB,EAAE;AACxB,gBAAgB,aAAa,EAAE,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,aAAa;AAC9D,sBAAsB,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,aAAa;AACrD,sBAAsB,EAAE;AACxB,aAAa,CAAC;AACd,SAAS;AACT,QAAQ,MAAM,IAAI,SAAS,CAAC,+DAA+D,CAAC,CAAC;AAC7F,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,IAAI,aAAa,GAAG;AACxB,QAAQ,MAAM,IAAI,SAAS,CAAC,CAAC,mDAAmD,CAAC,CAAC,CAAC;AACnF,KAAK;AACL;AACA;AACA;AACA,IAAI,IAAI,UAAU,GAAG;AACrB,QAAQ,OAAO,IAAI,CAAC,WAAW,CAAC;AAChC,KAAK;AACL;AACA;AACA;AACA,IAAI,IAAI,QAAQ,GAAG;AACnB,QAAQ,OAAO,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC;AACpC,KAAK;AACL;AACA;AACA;AACA,IAAI,IAAI,MAAM,GAAG;AACjB,QAAQ,OAAO,IAAI,CAAC,OAAO,CAAC;AAC5B,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,IAAI,IAAI,GAAG;AACf,QAAQ,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE;AAC5B,YAAY,MAAM,IAAI,SAAS,CAAC,CAAC,2HAA2H,CAAC,EAAE,gCAAgC,CAAC,CAAC;AACjM,SAAS;AACT,QAAQ,IAAI,CAAC,IAAI,CAAC,KAAK,EAAE;AACzB,YAAY,MAAM,IAAI,SAAS,CAAC,CAAC,gIAAgI,CAAC,CAAC,CAAC;AACpK,SAAS;AACT,QAAQ,OAAO,IAAI,CAAC,KAAK,CAAC;AAC1B,KAAK;AACL;AACA;AACA;AACA,IAAI,IAAI,WAAW,GAAG;AACtB,QAAQ,OAAO,IAAI,CAAC,YAAY,CAAC;AACjC,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,MAAM,WAAW,CAAC,MAAM,GAAG,EAAE,EAAE;AACnC,QAAQ,MAAM,QAAQ,GAAG,MAAM;AAC/B,2CAA2C,qBAAU,CAAC,CAAC;AACvD,QAAQ,IAAI,CAAC,KAAK,GAAG,MAAM,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;AACzD,KAAK;AACL,CAAC;AACD;AACA,MAAM,WAAW,SAAS,kBAAkB,CAAC;AAC7C,IAAI,IAAI,QAAQ,GAAG;AACnB,QAAQ,IAAI,IAAI,CAAC,SAAS,EAAE;AAC5B,YAAY,OAAO,IAAI,CAAC,SAAS,CAAC;AAClC,SAAS;AACT,QAAQ,MAAM,IAAI,SAAS,CAAC,yDAAyD,EAAE,WAAW,CAAC,CAAC;AACpG,KAAK;AACL,IAAI,IAAI,QAAQ,CAAC,KAAK,EAAE;AACxB,QAAQ,IAAI,CAAC,SAAS,GAAG,KAAK,CAAC;AAC/B,KAAK;AACL,IAAI,aAAa,CAAC,IAAI,EAAE;AACxB,QAAQ,IAAI,GAAG,OAAO,IAAI,KAAK,QAAQ,GAAG,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;AAC3D,QAAQ,OAAO,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,MAAM,GAAG,CAAC,KAAK,CAAC,CAAC;AAChD,KAAK;AACL,IAAI,WAAW,CAAC,IAAI,EAAE;AACtB,QAAQ,OAAO,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,KAAK,KAAK,CAAC;AAClD,KAAK;AACL,IAAI,IAAI,IAAI,GAAG;AACf,QAAQ,MAAM,IAAI,KAAK,CAAC,iBAAiB,CAAC,CAAC;AAC3C,KAAK;AACL,IAAI,MAAM,OAAO,CAAC,IAAI,EAAE,MAAM,GAAG,IAAI,EAAE;AACvC,QAAQ,IAAI,GAAG,OAAO,IAAI,KAAK,QAAQ,GAAG,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;AAC3D,QAAQ,MAAM,aAAa,GAAG,MAAM,IAAI,CAAC,QAAQ,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,GAAG,EAAE,CAAC;AACzE;AACA,QAAQ,OAAO,aAAa,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,GAAG,KAAK;AAC/C,YAAY,OAAO;AACnB,gBAAgB,CAAC,MAAM,GAAG,GAAG,CAAC,EAAE;AAChC,gBAAgB,GAAG,GAAG,CAAC,IAAI,EAAE;AAC7B,aAAa,CAAC;AACd,SAAS,CAAC,CAAC;AACX,KAAK;AACL,IAAI,MAAM,UAAU,CAAC,IAAI,EAAE;AAC3B,QAAQ,OAAO,IAAI,CAAC,QAAQ,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC;AACvD,KAAK;AACL,IAAI,MAAM,SAAS,CAAC,IAAI,EAAE,MAAM,GAAG,IAAI,EAAE;AACzC,QAAQ,MAAM,gBAAgB,GAAG,MAAM,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,GAAG,EAAE,CAAC;AACrE,QAAQ,OAAO;AACf,YAAY,GAAG,gBAAgB,CAAC,IAAI,EAAE;AACtC,YAAY,CAAC,MAAM,GAAG,gBAAgB,CAAC,EAAE;AACzC,SAAS,CAAC;AACV,KAAK;AACL,IAAI,MAAM,QAAQ,CAAC,IAAI,EAAE;AACzB,QAAQ,MAAM,IAAI,KAAK,CAAC,iBAAiB,CAAC,CAAC;AAC3C,KAAK;AACL,IAAI,MAAM,MAAM,CAAC,IAAI,EAAE,KAAK,EAAE;AAC9B,QAAQ,MAAM,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;AACpD,KAAK;AACL,IAAI,MAAM,GAAG,CAAC,IAAI,EAAE,KAAK,EAAE;AAC3B,QAAQ,MAAM,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,EAAE,GAAG,KAAK,EAAE,CAAC,CAAC;AACxD,KAAK;AACL,IAAI,MAAM,MAAM,CAAC,IAAI,EAAE;AACvB,QAAQ,MAAM,gBAAgB,GAAG,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC;AAC1D,QAAQ,IAAI,gBAAgB,EAAE;AAC9B,YAAY,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,CAAC;AACzC,SAAS;AACT,aAAa;AACb,YAAY,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC;AACvC,SAAS;AACT,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,KAAK,CAAC,MAAM,EAAE,MAAM,EAAE,EAAE,EAAE;AAC9B,QAAQ,IAAI,MAAM,IAAI,CAAC,gBAAgB,CAAC,MAAM,CAAC,EAAE;AACjD,YAAY,MAAM,IAAI,gBAAgB,CAAC,CAAC,8IAA8I,EAAE,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC,oDAAoD,EAAE,sBAAsB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,eAAe,CAAC,CAAC;AAC3T,SAAS;AACT,QAAQ,MAAM,IAAI,KAAK,CAAC,iBAAiB,CAAC,CAAC;AAC3C,KAAK;AACL,IAAI,OAAO,CAAC,MAAM,EAAE,EAAE,EAAE;AACxB,QAAQ,IAAI,MAAM,IAAI,CAAC,gBAAgB,CAAC,MAAM,CAAC,EAAE;AACjD,YAAY,MAAM,IAAI,gBAAgB,CAAC,CAAC,mHAAmH,EAAE,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC,kDAAkD,EAAE,sBAAsB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,eAAe,CAAC,CAAC;AAC9R,SAAS;AACT,QAAQ,MAAM,IAAI,KAAK,CAAC,iBAAiB,CAAC,CAAC;AAC3C,KAAK;AACL,IAAI,GAAG,CAAC,IAAI,GAAG,GAAG,EAAE;AACpB,QAAQ,MAAM,IAAI,KAAK,CAAC,iBAAiB,CAAC,CAAC;AAC3C,KAAK;AACL,IAAI,MAAM,eAAe,CAAC,IAAI,EAAE;AAChC,QAAQ,MAAM,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,MAAM,EAAE,CAAC;AAC/C,KAAK;AACL,IAAI,MAAM,iBAAiB,CAAC,IAAI,EAAE;AAClC,QAAQ,MAAM,KAAK,GAAG,IAAI,CAAC,QAAQ,CAAC,KAAK,EAAE,CAAC;AAC5C;AACA,QAAQ,IAAI,CAAC,QAAQ,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,UAAU,CAAC,CAAC,QAAQ,KAAK;AAChE;AACA,YAAY,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,GAAG,KAAK;AAC3C,gBAAgB,KAAK,CAAC,MAAM,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;AACtC,aAAa,CAAC,CAAC;AACf,SAAS,CAAC,CAAC;AACX;AACA,QAAQ,MAAM,KAAK,CAAC,MAAM,EAAE,CAAC;AAC7B,KAAK;AACL,CAAC;AACD;AACA,MAAM,sBAAsB,GAAG,CAAC,OAAO,EAAE,SAAS,EAAE,UAAU,CAAC,CAAC;AAChE;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,gBAAgB,CAAC,MAAM,EAAE;AAClC,IAAI,MAAM,IAAI,GAAG,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,GAAG,MAAM,GAAG,CAAC,MAAM,CAAC,CAAC;AAC3D,IAAI,OAAO,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,MAAM,sBAAsB,CAAC,QAAQ,CAAC,CAAC,CAAC,GAAG,IAAI,GAAG,KAAK,CAAC,CAAC,CAAC;AAClF,CAAC;AACD;AACA,MAAM,gBAAgB,SAAS,SAAS,CAAC;AACzC;;MCpLa,cAAe,SAAQ,WAAW;IAc7C,YAAY,MAAmC;QAC7C,KAAK,EAAE,CAAC;QAbV,QAAG,yCAAsB;QAOf,gBAAW,GAAG,IAAI,CAAC;QAO3B,IAAI,YAAY,CAAC,MAAM,CAAC,EAAE;YACxB,MAAM,IAAI,SAAS,CACjB,oCAAoC,EACpC,uBAAuB,CACxB,CAAC;SACH;QACD,IAAI,CAAC,MAAM,EAAE;YACX,MAAM,GAAG;gBACP,cAAc,EAAE,qBAAqB,CAAC,MAAM,CAAC;gBAC7C,WAAW,EAAE,cAAc,CAAC,MAAM,CAAC;aACpC,CAAC;SACH;QACD,IAAI,aAAa,CAAC,MAAM,CAAC,EAAE;YACzB,MAAM,CAAC,cAAc;gBACnB,MAAM,CAAC,cAAc,IAAI,qBAAqB,CAAC,MAAM,CAAC,CAAC;YACzD,MAAM,CAAC,WAAW,GAAG,MAAM,CAAC,WAAW,IAAI,cAAc,CAAC,MAAM,CAAC,CAAC;YAClE,MAAM,CAAC,IAAI,GAAG,uBAAuB,CAAC,MAAM,CAAC,CAAC;YAC9C,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC;SACvB;aAAM;YACL,MAAM,IAAI,SAAS,CACjB,4IAA4I,IAAI,CAAC,SAAS,CACxJ,MAAM,EACN,IAAI,EACJ,CAAC,CACF,EAAE,EACH,uBAAuB,CACxB,CAAC;SACH;QACD,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC;KACvB;IA1CD,aAAa,OAAO,CAAC,MAAkC;QACrD,MAAM,GAAG,GAAG,IAAI,cAAc,CAAC,MAAM,CAAC,CAAC;QACvC,MAAM,GAAG,CAAC,OAAO,EAAE,CAAC;QACpB,OAAO,GAAG,CAAC;KACZ;IAwCM,MAAM,OAAO;QAClB,IAAI,IAAI,CAAC,YAAY,EAAE;YACrB,OAAO,CAAC,IAAI,CAAC,aAAa,IAAI,CAAC,MAAM,CAAC,IAAI,oBAAoB,CAAC,CAAC;YAChE,OAAO,IAAI,CAAC;SACb;QACD,IAAI,aAAa,CAAC,IAAI,CAAC,OAAO,CAAC,EAAE;YAC/B,MAAM,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;SACzC;aAAM,IAAI,YAAY,CAAC,IAAI,CAAC,OAAO,CAAC,EAAE;YACrC,MAAM,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;SACzC;KACF;IAEM,MAAM,IAAI;QACf,IAAI,IAAI,CAAC,OAAO,CAAC,OAAO,EAAE;YACxB,MAAM,IAAI,SAAS,CACjB,sEAAsE,CACvE,CAAC;SACH;QAED,OAAO,IAAI,CAAC,IAAI,CAAC,IAAe,CAAC,CAAC;KACnC;IAES,MAAM,cAAc,CAAC,MAAoB;QACjD,IAAI,CAAC,MAAM,EAAE,cAAc,EAAE;YAC3B,MAAM,IAAI,SAAS,CACjB,0DAA0D,CAC3D,CAAC;SACH;QACD,MAAM,WAAW,GAAG,cAAc,CAAC,IAAI,CAAC,CAAC;QACzC,MAAMA,YAAU,GAAGC,UAAY,CAAC,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC,CAAC;QAE5D,IAAI,CAAC,IAAI,CAAC,YAAY,EAAE;YACtB,IAAI,CAAC,IAAI,GAAG,WAAW,CAAC,QAAQ,CAAC,MAAM,CAAC,IAAI,CAAC;kBACzC,qBAAqB,CACnB,MAAM,CAAC,IAAI,EACV,IAA+B,CACjC;kBACD,aAAa,CACX;gCACED,YAAU;oBACV,WAAW,EAAE,MAAM,CAAC,WAAW;iBAChC,EACD,MAAM,CAAC,IAAI,CACZ,CAAC;SACP;KACF;;;;;IAKS,MAAM,cAAc,CAAC,MAAmB;QAChD,MAAM,IAAI,CAAC,WAAW,CAAC;YACrB,EAAE,EAAE,MAAM,CAAC,QAAQ,IAAI,EAAE;YACzB,IAAI,EAAE,EAAE,SAAS,EAAE,EAAE,EAAE,GAAG,MAAM,CAAC,QAAQ,EAAE;SAC5C,CAAC,CAAC;KACJ;;;;;"}