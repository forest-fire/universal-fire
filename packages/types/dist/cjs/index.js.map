{"version":3,"file":"index.js","sources":["../../src/fire-type-fns.ts","../../src/@types/serialized-query.ts"],"sourcesContent":["import type {\n  IAdminConfig,\n  IClientConfig,\n  IDatabaseConfig,\n  IMockConfig,\n} from './index';\n\nexport function isMockConfig(config: IDatabaseConfig): config is IMockConfig {\n  return config && (config as IMockConfig).mocking === true;\n}\n\nexport function isRealDbConfig(\n  config: IDatabaseConfig\n): config is IAdminConfig | IClientConfig {\n  return config && config.mocking !== true;\n}\n\n/**\n * In a client SDK setting, this checks that the typing is NOT a mock\n * typing (and that apiKey and databaseURL are indeed set) and responds\n * by letting typescript know that it is a `IClientConfig` configuration.\n */\nexport function isClientConfig(\n  config?: IClientConfig | IMockConfig\n): config is IClientConfig {\n  return config &&\n    config.mocking !== true &&\n    (config as IClientConfig).apiKey !== undefined &&\n    (config as IClientConfig).databaseURL !== undefined\n    ? true\n    : false;\n}\n\nexport function isAdminConfig(\n  config?: IAdminConfig | IMockConfig\n): config is IAdminConfig {\n  return config &&\n    config.mocking !== true &&\n    (config as any).apiKey === undefined &&\n    (config as any).databaseURL !== undefined\n    ? true\n    : false;\n}\n","import { IFirestoreQuery, IRealTimeQuery } from './fire-proxies';\n\nimport { IDictionary } from 'common-types';\n\n/**\n * Defines the public interface which any serializer must\n * conform to to be recognized as a Serialized Query in\n * `universal-fire`.\n */\nexport interface ISerializedQuery<T = any> {\n  db: ISimplifiedDatabase;\n  path: string;\n  identity: ISerializedIdentity<T>;\n  setDB: (db: ISimplifiedDatabase) => ISerializedQuery<T>;\n  setPath: (path: string) => ISerializedQuery<T>;\n  hashCode: () => number;\n  limitToFirst: (value: number) => ISerializedQuery<T>;\n  limitToLast: (value: number) => ISerializedQuery<T>;\n  orderByChild: (child: keyof T & string) => ISerializedQuery<T>;\n  orderByValue: () => ISerializedQuery<T>;\n  orderByKey: () => ISerializedQuery<T>;\n  startAt: (value: any, key?: keyof T & string) => ISerializedQuery<T>;\n  endAt: (value: any, key?: keyof T & string) => ISerializedQuery<T>;\n  equalTo: (value: any, key?: keyof T & string) => ISerializedQuery<T>;\n  toJSON: () => ISerializedIdentity<T>;\n  toString: () => string;\n  deserialize: (db: ISimplifiedDatabase) => IFirestoreQuery | IRealTimeQuery;\n  execute(db?: ISimplifiedDatabase): Promise<any>;\n  where: (\n    operation: IComparisonOperator,\n    value: any,\n    key?: (keyof T & string) | undefined\n  ) => ISerializedQuery<T>;\n}\n\nexport interface ISerializedIdentity<T>\n  extends Omit<ISerializedRealTimeIdentity<T>, 'orderBy'> {\n  orderBy: IRealQueryOrderType | IFirestoreQueryOrderType;\n}\n\nexport type IComparisonOperator = '=' | '>' | '<';\n\nexport interface ISimplifiedDatabase {\n  ref: (path: string) => any | IRealTimeQuery | IFirestoreQuery;\n}\n\nexport enum RealQueryOrderType {\n  orderByChild = 'orderByChild',\n  orderByKey = 'orderByKey',\n  orderByValue = 'orderByValue',\n}\n\nexport type IRealQueryOrderType = keyof typeof RealQueryOrderType;\n\nexport type IFirestoreQueryOrderType = IRealQueryOrderType | 'orderBy';\n\nexport interface ISerializedRealTimeIdentity<T = IDictionary> {\n  orderBy: IRealQueryOrderType;\n  orderByKey?: keyof T;\n  limitToFirst?: number;\n  limitToLast?: number;\n  startAt?: string;\n  startAtKey?: string;\n  endAt?: string;\n  endAtKey?: string;\n  equalTo?: string;\n  equalToKey?: string;\n  path: string;\n}\n"],"names":["RealQueryOrderType"],"mappings":";;;;SAOgB,YAAY,CAAC,MAAuB;IAClD,OAAO,MAAM,IAAK,MAAsB,CAAC,OAAO,KAAK,IAAI,CAAC;AAC5D,CAAC;SAEe,cAAc,CAC5B,MAAuB;IAEvB,OAAO,MAAM,IAAI,MAAM,CAAC,OAAO,KAAK,IAAI,CAAC;AAC3C,CAAC;AAED;;;;;SAKgB,cAAc,CAC5B,MAAoC;IAEpC,OAAO,MAAM;QACX,MAAM,CAAC,OAAO,KAAK,IAAI;QACtB,MAAwB,CAAC,MAAM,KAAK,SAAS;QAC7C,MAAwB,CAAC,WAAW,KAAK,SAAS;UACjD,IAAI;UACJ,KAAK,CAAC;AACZ,CAAC;SAEe,aAAa,CAC3B,MAAmC;IAEnC,OAAO,MAAM;QACX,MAAM,CAAC,OAAO,KAAK,IAAI;QACtB,MAAc,CAAC,MAAM,KAAK,SAAS;QACnC,MAAc,CAAC,WAAW,KAAK,SAAS;UACvC,IAAI;UACJ,KAAK,CAAC;AACZ;;ACIA,WAAY,kBAAkB;IAC5B,mDAA6B,CAAA;IAC7B,+CAAyB,CAAA;IACzB,mDAA6B,CAAA;AAC/B,CAAC,EAJWA,0BAAkB,KAAlBA,0BAAkB;;;;;;;"}