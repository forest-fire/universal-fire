type _IRtdbReference_ = import('@firebase/database-types').Reference;

export interface IRtdbReference extends _IRtdbReference_ {
  /**
   * **key**
   * [ docs for
   * [client](https://firebase.google.com/docs/reference/js/firebase.database.Reference#key),
   * [admin](https://firebase.google.com/docs/reference/admin/node/admin.database.Reference#key),
   * [~rest~]() ]
   *
   * The last part of the Reference's path.
   *
   * For example, "ada" is the key for https://<DATABASE_NAME>.firebaseio.com/users/ada.
   * The key of a root Reference is null.
   */
  key: import('@firebase/database-types').Reference['key'];

  /**
   * **child**
   * [ docs for
   * [client](https://firebase.google.com/docs/reference/js/firebase.database.Reference#child),
   * [admin](https://firebase.google.com/docs/reference/admin/node/admin.database.Reference#child),
   * [~rest~]() ]
   *
   * Gets a Reference for the location at the specified relative path.
   *
   * The relative path can either be a simple child name (for example, "ada")
   * or a deeper slash-separated path (for example, "ada/name/first").
   */
  child: import('@firebase/database-types').Reference['child'];

  /**
   * **onDisconnect**
   * [ docs for
   * [client](https://firebase.google.com/docs/reference/js/firebase.database.Reference#ondisconnect),
   * [admin](https://firebase.google.com/docs/reference/admin/node/admin.database.Reference#ondisconnect),
   * [~rest~]() ]
   *
   * Returns an `OnDisconnect` object. For more info see [Enabling Offline Capabilities
   * in Javascript](https://firebase.google.com/docs/database/web/offline-capabilities).
   */
  onDisconnect: import('@firebase/database-types').Reference['onDisconnect'];

  /**
   * **parent**
   * [ docs for
   * [client](https://firebase.google.com/docs/reference/js/firebase.database.Reference#parent),
   * [admin](https://firebase.google.com/docs/reference/admin/node/admin.database.Reference#parent),
   * [~rest~]() ]
   *
   * The parent location of a Reference. The _parent_ of a **root** Reference is `null`.
   */
  parent: import('@firebase/database-types').Reference['parent'];

  /**
   * **push**
   * [ docs for
   * [client](https://firebase.google.com/docs/reference/js/firebase.database.Reference#push),
   * [admin](https://firebase.google.com/docs/reference/admin/node/admin.database.Reference#push),
   * [~rest~]() ]
   *
   * Generates a new child location using a unique key and returns its Reference. This is the
   * most common pattern for adding data to a collection of items.
   *
   * If you provide a value to push(), the value is written to the generated location. If you
   * don't pass a value, nothing is written to the database and the child remains empty (but
   * you can use the Reference elsewhere).
   *
   * The unique keys generated by push() are ordered by the current time, so the resulting list
   * of items is chronologically sorted. The keys are also designed to be unguessable (they
   * contain 72 random bits of entropy).
   */
  push: import('@firebase/database-types').Reference['push'];

  /**
   * **remove**
   * [ docs for
   * [client](https://firebase.google.com/docs/reference/js/firebase.database.Reference#remove),
   * [admin](https://firebase.google.com/docs/reference/admin/node/admin.database.Reference#remove),
   * [rest](https://firebase.google.com/docs/database/rest/save-data#section-delete) ]
   *
   * Removes the data at this Database location. Any data at child locations will also be deleted.
   *
   * The effect of the remove will be visible immediately and the corresponding event 'value' will
   * be triggered. Synchronization of the remove to the Firebase servers will also be started, and
   * the returned Promise will resolve when complete. If provided, the onComplete callback will be
   * called asynchronously after synchronization has finished.
   */
  remove: import('@firebase/database-types').Reference['remove'];

  /**
   * **set**
   * [ docs for
   * [client](https://firebase.google.com/docs/reference/js/firebase.database.Reference#set),
   * [admin](https://firebase.google.com/docs/reference/admin/node/admin.database.Reference#set),
   * [rest](https://firebase.google.com/docs/database/rest/save-data#section-delete) ]
   *
   * Writes data to this Database location. This will overwrite any data at this location and
   * all child locations.
   *
   * The effect of the write will be visible immediately, and the corresponding events
   * ("value", "child_added", etc.) will be triggered. Synchronization of the data to the Firebase
   * servers will also be started, and the returned Promise will resolve when complete. If provided,
   * the onComplete callback will be called asynchronously after synchronization has finished.
   *
   * Passing `null` for the new value is equivalent to calling `remove()`; namely, all data at this
   * location and all child locations will be deleted.
   */
  set: import('@firebase/database-types').Reference['set'];

  /**
   * **transaction**
   * [ docs for
   * [client](https://firebase.google.com/docs/reference/js/firebase.database.Reference#transaction),
   * [admin](https://firebase.google.com/docs/reference/admin/node/admin.database.Reference#transaction),
   * [~rest~]() ]
   *
   * Atomically modify the data at this location. Unlike a normal set(), which just overwrites
   * the data regardless of its previous value, transaction() is used to modify the existing
   * value to a new value, ensuring there are no conflicts with other clients writing to the
   * same location at the same time.
   */
  transaction: import('@firebase/database-types').Reference['transaction'];

  /**
   * **update**
   * [ docs for
   * [client](https://firebase.google.com/docs/reference/js/firebase.database.Reference#update),
   * [admin](https://firebase.google.com/docs/reference/admin/node/admin.database.Reference#update),
   * [rest](https://firebase.google.com/docs/database/rest/save-data#section-delete) ]
   *
   * Atomically modify the data at this location. Unlike a normal set(), which just overwrites
   * the data regardless of its previous value, update() is used to modify the existing
   * value to a new value, ensuring there are no conflicts with other clients writing to the
   * same location at the same time.
   */
  update: import('@firebase/database-types').Reference['update'];
}
